{"ast":null,"code":"import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'];\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = ('ontouchstart' in Konva._global);\n\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\n\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\n\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\n\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  });\n}\n\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\n\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n\n  return snapped;\n}\n\nexport class Transformer extends Group {\n  constructor(config) {\n    super(config);\n    this._transforming = false;\n\n    this._createElements();\n\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n\n  setNode(node) {\n    Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n\n  _getEventNamespace() {\n    return EVENTS_NAME + this._id;\n  }\n\n  setNodes() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n\n    this._nodes = nodes;\n\n    if (nodes.length === 1 && this.useSingleNodeRotation()) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n\n    this._nodes.forEach(node => {\n      const onChange = () => {\n        if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n\n        this._resetTransformCache();\n\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n\n      const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + this._getEventNamespace()).join(' ');\n\n      node.on(additionalEvents, onChange);\n      node.on(TRANSFORM_CHANGE_STR.map(e => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n      node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n\n      this._proxyDrag(node);\n    });\n\n    this._resetTransformCache();\n\n    var elementsCreated = !!this.findOne('.top-left');\n\n    if (elementsCreated) {\n      this.update();\n    }\n\n    return this;\n  }\n\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${this._getEventNamespace()}`, e => {\n      lastPos = node.getAbsolutePosition();\n\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${this._getEventNamespace()}`, e => {\n      if (!lastPos) {\n        return;\n      }\n\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n\n        if (otherNode.isDragging()) {\n          return;\n        }\n\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n\n  getNodes() {\n    return this._nodes || [];\n  }\n\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + this._getEventNamespace());\n      });\n    }\n\n    this._nodes = [];\n\n    this._resetTransformCache();\n  }\n\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n\n    this._clearCache('transform');\n\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n\n  __getNodeShape(node) {\n    let rot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rotation();\n    let relative = arguments.length > 2 ? arguments[2] : undefined;\n    var rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    var absScale = node.getAbsoluteScale(relative);\n    var absPos = node.getAbsolutePosition(relative);\n    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n\n  __getNodeRect() {\n    var node = this.getNode();\n\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        var transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Transform();\n    tr.rotate(-Konva.getAngle(this.rotation()));\n    var minX, minY, maxX, maxY;\n    totalPoints.forEach(function (point) {\n      var transformed = tr.point(point);\n\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Konva.getAngle(this.rotation())\n    };\n  }\n\n  getX() {\n    return this._getNodeRect().x;\n  }\n\n  getY() {\n    return this._getNodeRect().y;\n  }\n\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n\n  _createElements() {\n    this._createBack();\n\n    ANCHORS_NAMES.forEach(function (name) {\n      this._createAnchor(name);\n    }.bind(this));\n\n    this._createAnchor('rotater');\n  }\n\n  _createAnchor(name) {\n    var anchor = new Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    var self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      var rad = Konva.getAngle(this.rotation());\n      var cursor = getCursor(name, rad);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n\n  _createBack() {\n    var back = new Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      draggable: true,\n\n      sceneFunc(ctx) {\n        var tr = this.getParent();\n        var padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n        ctx.moveTo(this.width() / 2, -padding);\n\n        if (tr.rotateEnabled()) {\n          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n        }\n\n        ctx.fillStrokeShape(this);\n      },\n\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n\n        var padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n\n    this._proxyDrag(back);\n\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    this.on('dragmove', e => {\n      this.update();\n    });\n  }\n\n  _handleMouseDown(e) {\n    this._movingAnchorName = e.target.name().split(' ')[0];\n\n    var attrs = this._getNodeRect();\n\n    var width = attrs.width;\n    var height = attrs.height;\n    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n\n    this._transforming = true;\n    var ap = e.target.getAbsolutePosition();\n    var pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n\n    this._fire('transformstart', {\n      evt: e.evt,\n      target: this.getNode()\n    });\n\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e.evt,\n        target\n      });\n    });\n  }\n\n  _handleMouseMove(e) {\n    var x, y, newHypotenuse;\n    var anchorNode = this.findOne('.' + this._movingAnchorName);\n    var stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    let newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n\n    if (this.anchorDragBoundFunc()) {\n      newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n    }\n\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n\n    if (this._movingAnchorName === 'rotater') {\n      var attrs = this._getNodeRect();\n\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n\n      var oldRotation = Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n\n      this._fitNodesInto(shape, e);\n\n      return;\n    }\n\n    var keepProportion = this.keepRatio() || e.shiftKey;\n    var centeredScaling = this.centeredScaling() || e.altKey;\n\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n\n    var centeredScaling = this.centeredScaling() || e.altKey;\n\n    if (centeredScaling) {\n      var topLeft = this.findOne('.top-left');\n      var bottomRight = this.findOne('.bottom-right');\n      var topOffsetX = topLeft.x();\n      var topOffsetY = topLeft.y();\n      var bottomOffsetX = this.getWidth() - bottomRight.x();\n      var bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n\n    var absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Konva.getAngle(this.rotation())\n    }, e);\n  }\n\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n\n  _removeEvents(e) {\n    if (this._transforming) {\n      this._transforming = false;\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n\n      var node = this.getNode();\n\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n\n      if (node) {\n        this._nodes.forEach(target => {\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n        });\n      }\n\n      this._movingAnchorName = null;\n    }\n  }\n\n  _fitNodesInto(newAttrs, evt) {\n    var oldAttrs = this._getNodeRect();\n\n    const minSize = 1;\n\n    if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n\n    if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n\n    const allowNegativeScale = this.flipEnabled();\n    var t = new Transform();\n    t.rotate(Konva.getAngle(this.rotation()));\n\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n\n    const baseSize = 10000000;\n    const oldTr = new Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Transform();\n    newTr.translate(newAttrs.x, newAttrs.y);\n    newTr.rotate(newAttrs.rotation);\n    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n    const delta = newTr.multiply(oldTr.invert());\n\n    this._nodes.forEach(node => {\n      var _a;\n\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n\n    this.rotation(Util._getRotation(newAttrs.rotation));\n\n    this._resetTransformCache();\n\n    this.update();\n    this.getLayer().batchDraw();\n  }\n\n  forceUpdate() {\n    this._resetTransformCache();\n\n    this.update();\n  }\n\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n\n  update() {\n    var _a;\n\n    var attrs = this._getNodeRect();\n\n    this.rotation(Util._getRotation(attrs.rotation));\n    var width = attrs.width;\n    var height = attrs.height;\n    var enabledAnchors = this.enabledAnchors();\n    var resizeEnabled = this.resizeEnabled();\n    var padding = this.padding();\n    var anchorSize = this.anchorSize();\n    this.find('._anchor').forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      x: 0,\n      y: 0\n    });\n\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n\n  isTransforming() {\n    return this._transforming;\n  }\n\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n\n    Group.prototype.destroy.call(this);\n    this.detach();\n\n    this._removeEvents();\n\n    return this;\n  }\n\n  toObject() {\n    return Node.prototype.toObject.call(this);\n  }\n\n  getClientRect() {\n    if (this.nodes().length > 0) {\n      return super.getClientRect();\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n  }\n\n}\n\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n\n  return val || [];\n}\n\nTransformer.prototype.className = 'Transformer';\n\n_registerNode(Transformer);\n\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"names":["Util","Transform","Factory","Node","Shape","Rect","Group","Konva","getBooleanValidator","getNumberValidator","_registerNode","EVENTS_NAME","ATTR_CHANGE_LIST","map","e","join","NODES_RECT","TRANSFORM_CHANGE_STR","ANGLES","TOUCH_DEVICE","_global","getCursor","anchorName","rad","degToRad","angle","radToDeg","_inRange","error","ANCHORS_NAMES","MAX_SAFE_INTEGER","getCenter","shape","x","width","Math","cos","rotation","height","sin","y","rotateAroundPoint","angleRad","point","Object","assign","rotateAroundCenter","deltaRad","center","getSnap","snaps","newRotationRad","tol","snapped","i","length","getAngle","absDiff","abs","PI","dif","min","Transformer","constructor","config","_transforming","_createElements","_handleMouseMove","bind","_handleMouseUp","update","on","getNode","attachTo","node","setNode","warn","setNodes","_nodes","_getEventNamespace","_id","nodes","detach","useSingleNodeRotation","getAbsoluteRotation","forEach","onChange","_resetTransformCache","isDragging","additionalEvents","_attrsAffectingSize","prop","_proxyDrag","elementsCreated","findOne","lastPos","getAbsolutePosition","startDrag","dx","dy","otherNode","otherAbs","setAbsolutePosition","getNodes","getActiveAnchor","_movingAnchorName","off","_clearCache","_clearSelfAndDescendantCache","_getNodeRect","_getCache","__getNodeRect","__getNodeShape","rot","relative","rect","getClientRect","skipTransform","skipShadow","skipStroke","ignoreStroke","absScale","getAbsoluteScale","absPos","offsetX","offsetY","box","totalPoints","points","trans","getAbsoluteTransform","transformed","push","tr","rotate","minX","minY","maxX","maxY","undefined","max","invert","p","getX","getY","getWidth","getHeight","_createBack","name","_createAnchor","anchor","stroke","fill","strokeWidth","dragDistance","draggable","hitStrokeWidth","self","_handleMouseDown","stopDrag","cancelBubble","cursor","getStage","content","style","_cursorChange","add","back","sceneFunc","ctx","getParent","padding","beginPath","moveTo","rotateEnabled","lineTo","rotateAnchorOffset","_sign","fillStrokeShape","hitFunc","shouldOverdrawWholeArea","target","split","attrs","hypotenuse","sqrt","pow","window","addEventListener","ap","pos","getPointerPosition","_anchorDragOffset","_fire","evt","newHypotenuse","anchorNode","stage","setPointersPositions","pp","newNodePos","oldAbs","anchorDragBoundFunc","newAbs","delta","atan2","oldRotation","newRotation","rotationSnapTolerance","snappedRot","rotationSnaps","diff","_fitNodesInto","keepProportion","keepRatio","shiftKey","centeredScaling","altKey","comparePoint","reverseX","reverseY","position","console","Error","topLeft","bottomRight","topOffsetX","topOffsetY","bottomOffsetX","bottomOffsetY","move","_removeEvents","getTransform","removeEventListener","newAttrs","oldAttrs","minSize","allowNegativeScale","flipEnabled","t","indexOf","offset","replace","boundBoxFunc","bounded","baseSize","oldTr","translate","scale","newTr","multiply","_a","parentTransform","localTransform","copy","newLocalTransform","decompose","setAttrs","getLayer","batchDraw","_getRotation","forceUpdate","_batchChangeChild","selector","enabledAnchors","resizeEnabled","anchorSize","find","anchorStroke","anchorStrokeWidth","anchorFill","cornerRadius","anchorCornerRadius","visible","borderEnabled","borderStroke","borderStrokeWidth","dash","borderDash","isTransforming","stopTransform","destroy","prototype","call","toObject","validateAnchors","val","Array","className","addGetterSetter","backCompat","lineEnabled","rotateHandlerOffset","enabledHandlers"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/node_modules/konva/lib/shapes/Transformer.js"],"sourcesContent":["import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n];\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nexport class Transformer extends Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    _getEventNamespace() {\n        return EVENTS_NAME + this._id;\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        this._nodes = nodes;\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const onChange = () => {\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + this._getEventNamespace())\n                .join(' ');\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + this._getEventNamespace());\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Transform();\n        tr.rotate(-Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        this.on('dragmove', (e) => {\n            this.update();\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e.evt, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e.evt, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        let newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        if (this.anchorDragBoundFunc()) {\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n        }\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var keepProportion = this.keepRatio() || e.shiftKey;\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Transform();\n        t.rotate(Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node.prototype.toObject.call(this);\n    }\n    getClientRect() {\n        if (this.nodes().length > 0) {\n            return super.getClientRect();\n        }\n        else {\n            return { x: 0, y: 0, width: 0, height: 0 };\n        }\n    }\n}\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}