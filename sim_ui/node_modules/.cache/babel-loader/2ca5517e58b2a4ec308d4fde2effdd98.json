{"ast":null,"code":"var _jsxFileName = \"C:\\\\traffic_sim\\\\traffic-sim\\\\sim_ui\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport Konva from 'konva';\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Stage, Layer, Rect, Text, Line } from 'react-konva';\nimport road_data from './backend/salisbury-road-just-roads.json'; // Takes a JSON dict group (nodes) and pushes its elements into an Array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction dict_to_array(group) {\n  var array = [];\n\n  for (const element of Object.entries(group)) {\n    array.push(element);\n  }\n\n  return array;\n} // Takes array of nodes and returns HashTable of {key: Node ID, val: Coords} \n\n\nfunction nodes_to_hash(array) {\n  const ht = new Map();\n\n  for (const node of Object.entries(array)) {\n    ht.set(node[1][0], node[1][1]);\n  }\n\n  return ht;\n} // Takes an array of the Node IDs of a way, and a HashTable of the form {key: Node ID, val: Coords}\n// Returns an array [x1, y1, x2, y2, x3, ...] of the x and y coordinates of the nodes in the way\n\n\nfunction way_points(nodes_hash, way) {\n  var points = [];\n\n  for (let i = way.length - 1; i >= 0; i--) {\n    points.push(nodes_hash.get(way[i]).lon);\n    points.push(nodes_hash.get(way[i]).lat);\n  }\n\n  return points;\n}\n\nfunction points_to_way_dict(hash, ways) {\n  var array = [];\n\n  for (let i = 0; i < ways[0].length; i++) {\n    const points = way_points(hash, ways[0][i][1].noderefs);\n    points.map((_, i) => points[i] = points[i] * 0.5);\n    array.push({\n      points: points,\n      detail: ways[0][i][1]\n    });\n  }\n\n  return array;\n}\n\nconst GEN_ROADS = dict_to_array(road_data.nodes.connections);\nconst GEN_ATTRS = dict_to_array(road_data.nodes.attractions);\nconst GEN_WAYS = dict_to_array(road_data.ways.roads);\n/*\r\nconst roads is an array, roads[0] is an array of arrays, where each array in the array is a node\r\n*/\n\nconst App = () => {\n  _s();\n\n  const roads = React.useState(GEN_ROADS);\n  const attrs = React.useState(GEN_ATTRS);\n  const ways = React.useState(GEN_WAYS); //console.log(roads)\n\n  const roads_hash = nodes_to_hash(roads[0]);\n  const coord_array = points_to_way_dict(roads_hash, ways);\n  const widthFactor = 0.5;\n  const heightFactor = 0.5;\n  console.log(coord_array[0].detail);\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        text: \"Test Map\",\n        fontSize: 15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), roads[0].map((_, i) => /*#__PURE__*/_jsxDEV(Rect, {\n        id: roads[0][i][0],\n        x: roads[0][i][1].lon * widthFactor,\n        y: roads[0][i][1].lat * heightFactor,\n        width: 5,\n        height: 5,\n        fill: \"black\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)), coord_array.map((_, i) => ( /*#__PURE__*/_jsxDEV(Text, {\n        text: coord_array[i].detail.name,\n        fontSize: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        points: coord_array[i].points,\n        stroke: \"black\",\n        strokeWidth: parseInt(coord_array[i].detail.width)\n      }, i.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"IJ8cgIb7yOXMrWGG9M/w/idkGFc=\");\n\n_c = App;\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 100,\n  columnNumber: 15\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Konva","React","createRoot","Stage","Layer","Rect","Text","Line","road_data","dict_to_array","group","array","element","Object","entries","push","nodes_to_hash","ht","Map","node","set","way_points","nodes_hash","way","points","i","length","get","lon","lat","points_to_way_dict","hash","ways","noderefs","map","_","detail","GEN_ROADS","nodes","connections","GEN_ATTRS","attractions","GEN_WAYS","roads","App","useState","attrs","roads_hash","coord_array","widthFactor","heightFactor","console","log","window","innerWidth","innerHeight","name","parseInt","width","toString","container","document","getElementById","root","render"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/src/index.js"],"sourcesContent":["import Konva from 'konva';\r\nimport React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { Stage, Layer, Rect, Text, Line } from 'react-konva';\r\nimport road_data from './backend/salisbury-road-just-roads.json';\r\n\r\n// Takes a JSON dict group (nodes) and pushes its elements into an Array\r\nfunction dict_to_array(group) {\r\n  var array = []\r\n  for (const element of Object.entries(group)) {\r\n    array.push(element)\r\n  }\r\n  return array\r\n}\r\n\r\n// Takes array of nodes and returns HashTable of {key: Node ID, val: Coords} \r\nfunction nodes_to_hash(array) {\r\n  const ht = new Map()\r\n  for (const node of Object.entries(array)) {\r\n    ht.set(node[1][0], node[1][1])\r\n  }\r\n  return ht\r\n}\r\n\r\n// Takes an array of the Node IDs of a way, and a HashTable of the form {key: Node ID, val: Coords}\r\n// Returns an array [x1, y1, x2, y2, x3, ...] of the x and y coordinates of the nodes in the way\r\nfunction way_points(nodes_hash, way) {\r\n  var points = []\r\n  for (let i = way.length - 1; i >= 0; i--){\r\n    points.push(nodes_hash.get(way[i]).lon)\r\n    points.push(nodes_hash.get(way[i]).lat)\r\n  }\r\n  return points\r\n}\r\n\r\nfunction points_to_way_dict(hash, ways) {\r\n  var array = []\r\n  for (let i = 0; i < ways[0].length; i++) {\r\n    const points = way_points(hash, ways[0][i][1].noderefs)\r\n    points.map((_, i) => (\r\n      points[i] = points[i] * 0.5\r\n    ))\r\n    array.push({\r\n      points: points,\r\n      detail: ways[0][i][1]\r\n    })\r\n  }\r\n  return array\r\n}\r\n\r\nconst GEN_ROADS = dict_to_array(road_data.nodes.connections)\r\nconst GEN_ATTRS = dict_to_array(road_data.nodes.attractions)\r\nconst GEN_WAYS = dict_to_array(road_data.ways.roads)\r\n\r\n/*\r\nconst roads is an array, roads[0] is an array of arrays, where each array in the array is a node\r\n*/\r\n\r\nconst App = () => {\r\n  const roads = React.useState(GEN_ROADS)\r\n  const attrs = React.useState(GEN_ATTRS)\r\n  const ways = React.useState(GEN_WAYS)\r\n  //console.log(roads)\r\n  const roads_hash = nodes_to_hash(roads[0])\r\n  const coord_array = points_to_way_dict(roads_hash, ways)\r\n  const widthFactor = 0.5\r\n  const heightFactor = 0.5\r\n  console.log(coord_array[0].detail)\r\n    return (\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          <Text text=\"Test Map\" fontSize={15} />\r\n          {roads[0].map((_, i) => (\r\n          <Rect\r\n            key={i}\r\n            id={roads[0][i][0]}\r\n            x={roads[0][i][1].lon * widthFactor}\r\n            y={roads[0][i][1].lat * heightFactor}\r\n            width={5}\r\n            height={5}\r\n            fill=\"black\"\r\n          />\r\n        ))}\r\n          {coord_array.map((_, i) => (\r\n          <Text text={coord_array[i].detail.name} fontSize={30} />,\r\n          <Line\r\n          key={i.toString()}\r\n          points={coord_array[i].points}\r\n          stroke=\"black\"\r\n          strokeWidth={parseInt(coord_array[i].detail.width)}\r\n          />\r\n        ))}\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  };\r\n  \r\n  const container = document.getElementById('root');\r\n  const root = createRoot(container);\r\n  root.render(<App />);\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}