{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Util } from '../Util.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Pixelate = function (imageData) {\n  var pixelSize = Math.ceil(this.pixelSize()),\n      width = imageData.width,\n      height = imageData.height,\n      x,\n      y,\n      i,\n      red,\n      green,\n      blue,\n      alpha,\n      nBinsX = Math.ceil(width / pixelSize),\n      nBinsY = Math.ceil(height / pixelSize),\n      xBinStart,\n      xBinEnd,\n      yBinStart,\n      yBinEnd,\n      xBin,\n      yBin,\n      pixelsInBin,\n      data = imageData.data;\n\n  if (pixelSize <= 0) {\n    Util.error('pixelSize value can not be <= 0');\n    return;\n  }\n\n  for (xBin = 0; xBin < nBinsX; xBin += 1) {\n    for (yBin = 0; yBin < nBinsY; yBin += 1) {\n      red = 0;\n      green = 0;\n      blue = 0;\n      alpha = 0;\n      xBinStart = xBin * pixelSize;\n      xBinEnd = xBinStart + pixelSize;\n      yBinStart = yBin * pixelSize;\n      yBinEnd = yBinStart + pixelSize;\n      pixelsInBin = 0;\n\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n\n          i = (width * y + x) * 4;\n          red += data[i + 0];\n          green += data[i + 1];\n          blue += data[i + 2];\n          alpha += data[i + 3];\n          pixelsInBin += 1;\n        }\n      }\n\n      red = red / pixelsInBin;\n      green = green / pixelsInBin;\n      blue = blue / pixelsInBin;\n      alpha = alpha / pixelsInBin;\n\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n\n          i = (width * y + x) * 4;\n          data[i + 0] = red;\n          data[i + 1] = green;\n          data[i + 2] = blue;\n          data[i + 3] = alpha;\n        }\n      }\n    }\n  }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"names":["Factory","Util","Node","getNumberValidator","Pixelate","imageData","pixelSize","Math","ceil","width","height","x","y","i","red","green","blue","alpha","nBinsX","nBinsY","xBinStart","xBinEnd","yBinStart","yBinEnd","xBin","yBin","pixelsInBin","data","error","addGetterSetter","afterSetFilter"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/node_modules/konva/lib/filters/Pixelate.js"],"sourcesContent":["import { Factory } from '../Factory.js';\nimport { Util } from '../Util.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Pixelate = function (imageData) {\n    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;\n    if (pixelSize <= 0) {\n        Util.error('pixelSize value can not be <= 0');\n        return;\n    }\n    for (xBin = 0; xBin < nBinsX; xBin += 1) {\n        for (yBin = 0; yBin < nBinsY; yBin += 1) {\n            red = 0;\n            green = 0;\n            blue = 0;\n            alpha = 0;\n            xBinStart = xBin * pixelSize;\n            xBinEnd = xBinStart + pixelSize;\n            yBinStart = yBin * pixelSize;\n            yBinEnd = yBinStart + pixelSize;\n            pixelsInBin = 0;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    red += data[i + 0];\n                    green += data[i + 1];\n                    blue += data[i + 2];\n                    alpha += data[i + 3];\n                    pixelsInBin += 1;\n                }\n            }\n            red = red / pixelsInBin;\n            green = green / pixelsInBin;\n            blue = blue / pixelsInBin;\n            alpha = alpha / pixelsInBin;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    data[i + 0] = red;\n                    data[i + 1] = green;\n                    data[i + 2] = blue;\n                    data[i + 3] = alpha;\n                }\n            }\n        }\n    }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}