{"ast":null,"code":"import { Konva } from './Global.js';\nconst Captures = new Map();\nconst SUPPORT_POINTER_EVENTS = Konva._global['PointerEvent'] !== undefined;\nexport function getCapturedShape(pointerId) {\n  return Captures.get(pointerId);\n}\nexport function createEvent(evt) {\n  return {\n    evt,\n    pointerId: evt.pointerId\n  };\n}\nexport function hasPointerCapture(pointerId, shape) {\n  return Captures.get(pointerId) === shape;\n}\nexport function setPointerCapture(pointerId, shape) {\n  releaseCapture(pointerId);\n  const stage = shape.getStage();\n  if (!stage) return;\n  Captures.set(pointerId, shape);\n\n  if (SUPPORT_POINTER_EVENTS) {\n    shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));\n  }\n}\nexport function releaseCapture(pointerId, target) {\n  const shape = Captures.get(pointerId);\n  if (!shape) return;\n  const stage = shape.getStage();\n\n  if (stage && stage.content) {}\n\n  Captures.delete(pointerId);\n\n  if (SUPPORT_POINTER_EVENTS) {\n    shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));\n  }\n}","map":{"version":3,"names":["Konva","Captures","Map","SUPPORT_POINTER_EVENTS","_global","undefined","getCapturedShape","pointerId","get","createEvent","evt","hasPointerCapture","shape","setPointerCapture","releaseCapture","stage","getStage","set","_fire","PointerEvent","target","content","delete"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/node_modules/konva/lib/PointerEvents.js"],"sourcesContent":["import { Konva } from './Global.js';\nconst Captures = new Map();\nconst SUPPORT_POINTER_EVENTS = Konva._global['PointerEvent'] !== undefined;\nexport function getCapturedShape(pointerId) {\n    return Captures.get(pointerId);\n}\nexport function createEvent(evt) {\n    return {\n        evt,\n        pointerId: evt.pointerId,\n    };\n}\nexport function hasPointerCapture(pointerId, shape) {\n    return Captures.get(pointerId) === shape;\n}\nexport function setPointerCapture(pointerId, shape) {\n    releaseCapture(pointerId);\n    const stage = shape.getStage();\n    if (!stage)\n        return;\n    Captures.set(pointerId, shape);\n    if (SUPPORT_POINTER_EVENTS) {\n        shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));\n    }\n}\nexport function releaseCapture(pointerId, target) {\n    const shape = Captures.get(pointerId);\n    if (!shape)\n        return;\n    const stage = shape.getStage();\n    if (stage && stage.content) {\n    }\n    Captures.delete(pointerId);\n    if (SUPPORT_POINTER_EVENTS) {\n        shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,MAAMC,sBAAsB,GAAGH,KAAK,CAACI,OAAN,CAAc,cAAd,MAAkCC,SAAjE;AACA,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;EACxC,OAAON,QAAQ,CAACO,GAAT,CAAaD,SAAb,CAAP;AACH;AACD,OAAO,SAASE,WAAT,CAAqBC,GAArB,EAA0B;EAC7B,OAAO;IACHA,GADG;IAEHH,SAAS,EAAEG,GAAG,CAACH;EAFZ,CAAP;AAIH;AACD,OAAO,SAASI,iBAAT,CAA2BJ,SAA3B,EAAsCK,KAAtC,EAA6C;EAChD,OAAOX,QAAQ,CAACO,GAAT,CAAaD,SAAb,MAA4BK,KAAnC;AACH;AACD,OAAO,SAASC,iBAAT,CAA2BN,SAA3B,EAAsCK,KAAtC,EAA6C;EAChDE,cAAc,CAACP,SAAD,CAAd;EACA,MAAMQ,KAAK,GAAGH,KAAK,CAACI,QAAN,EAAd;EACA,IAAI,CAACD,KAAL,EACI;EACJd,QAAQ,CAACgB,GAAT,CAAaV,SAAb,EAAwBK,KAAxB;;EACA,IAAIT,sBAAJ,EAA4B;IACxBS,KAAK,CAACM,KAAN,CAAY,mBAAZ,EAAiCT,WAAW,CAAC,IAAIU,YAAJ,CAAiB,mBAAjB,CAAD,CAA5C;EACH;AACJ;AACD,OAAO,SAASL,cAAT,CAAwBP,SAAxB,EAAmCa,MAAnC,EAA2C;EAC9C,MAAMR,KAAK,GAAGX,QAAQ,CAACO,GAAT,CAAaD,SAAb,CAAd;EACA,IAAI,CAACK,KAAL,EACI;EACJ,MAAMG,KAAK,GAAGH,KAAK,CAACI,QAAN,EAAd;;EACA,IAAID,KAAK,IAAIA,KAAK,CAACM,OAAnB,EAA4B,CAC3B;;EACDpB,QAAQ,CAACqB,MAAT,CAAgBf,SAAhB;;EACA,IAAIJ,sBAAJ,EAA4B;IACxBS,KAAK,CAACM,KAAN,CAAY,oBAAZ,EAAkCT,WAAW,CAAC,IAAIU,YAAJ,CAAiB,oBAAjB,CAAD,CAA7C;EACH;AACJ"},"metadata":{},"sourceType":"module"}