{"ast":null,"code":"import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n  return Array.from(string);\n}\nvar AUTO = 'auto',\n    CENTER = 'center',\n    JUSTIFY = 'justify',\n    CHANGE_KONVA = 'Change.konva',\n    CONTEXT_2D = '2d',\n    DASH = '-',\n    LEFT = 'left',\n    TEXT = 'text',\n    TEXT_UPPER = 'Text',\n    TOP = 'top',\n    BOTTOM = 'bottom',\n    MIDDLE = 'middle',\n    NORMAL = 'normal',\n    PX_SPACE = 'px ',\n    SPACE = ' ',\n    RIGHT = 'right',\n    WORD = 'word',\n    CHAR = 'char',\n    NONE = 'none',\n    ELLIPSIS = 'â€¦',\n    ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n    attrChangeListLen = ATTR_CHANGE_LIST.length;\n\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(family => {\n    family = family.trim();\n    const hasSpace = family.indexOf(' ') >= 0;\n    const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n\n    if (hasSpace && !hasQuotes) {\n      family = `\"${family}\"`;\n    }\n\n    return family;\n  }).join(', ');\n}\n\nvar dummyContext;\n\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n\n  dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\n\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction _strokeFunc(context) {\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction checkDefaultFill(config) {\n  config = config || {};\n\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n\n  return config;\n}\n\nexport class Text extends Shape {\n  constructor(config) {\n    super(checkDefaultFill(config));\n    this._partialTextX = 0;\n    this._partialTextY = 0;\n\n    for (var n = 0; n < attrChangeListLen; n++) {\n      this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n    }\n\n    this._setTextData();\n  }\n\n  _sceneFunc(context) {\n    var textArr = this.textArr,\n        textArrLen = textArr.length;\n\n    if (!this.text()) {\n      return;\n    }\n\n    var padding = this.padding(),\n        fontSize = this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        verticalAlign = this.verticalAlign(),\n        alignY = 0,\n        align = this.align(),\n        totalWidth = this.getWidth(),\n        letterSpacing = this.letterSpacing(),\n        fill = this.fill(),\n        textDecoration = this.textDecoration(),\n        shouldUnderline = textDecoration.indexOf('underline') !== -1,\n        shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n        n;\n    var translateY = 0;\n    var translateY = lineHeightPx / 2;\n    var lineTranslateX = 0;\n    var lineTranslateY = 0;\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', MIDDLE);\n    context.setAttr('textAlign', LEFT);\n\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n\n    context.translate(padding, alignY + padding);\n\n    for (n = 0; n < textArrLen; n++) {\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      var obj = textArr[n],\n          text = obj.text,\n          width = obj.width,\n          lastLine = obj.lastInParagraph,\n          spacesNumber,\n          oneWord,\n          lineWidth;\n      context.save();\n\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n        context.lineWidth = fontSize / 15;\n        context.strokeStyle = fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        context.moveTo(lineTranslateX, translateY + lineTranslateY);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n        context.lineWidth = fontSize / 15;\n        context.strokeStyle = fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (letterSpacing !== 0 || align === JUSTIFY) {\n        spacesNumber = text.split(' ').length - 1;\n        var array = stringToArray(text);\n\n        for (var li = 0; li < array.length; li++) {\n          var letter = array[li];\n\n          if (letter === ' ' && !lastLine && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          context.fillStrokeShape(this);\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n\n      context.restore();\n\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  }\n\n  _hitFunc(context) {\n    var width = this.getWidth(),\n        height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  setText(text) {\n    var str = Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n\n    this._setAttr(TEXT, str);\n\n    return this;\n  }\n\n  getWidth() {\n    var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  }\n\n  getHeight() {\n    var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  }\n\n  getTextWidth() {\n    return this.textWidth;\n  }\n\n  getTextHeight() {\n    Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n\n  measureSize(text) {\n    var _context = getDummyContext(),\n        fontSize = this.fontSize(),\n        metrics;\n\n    _context.save();\n\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n\n    _context.restore();\n\n    return {\n      width: metrics.width,\n      height: fontSize\n    };\n  }\n\n  _getContextFont() {\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  }\n\n  _addTextLine(line) {\n    if (this.align() === JUSTIFY) {\n      line = line.trim();\n    }\n\n    var width = this._getTextWidth(line);\n\n    return this.textArr.push({\n      text: line,\n      width: width,\n      lastInParagraph: false\n    });\n  }\n\n  _getTextWidth(text) {\n    var letterSpacing = this.letterSpacing();\n    var length = text.length;\n    return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n  }\n\n  _setTextData() {\n    var lines = this.text().split('\\n'),\n        fontSize = +this.fontSize(),\n        textWidth = 0,\n        lineHeightPx = this.lineHeight() * fontSize,\n        width = this.attrs.width,\n        height = this.attrs.height,\n        fixedWidth = width !== AUTO && width !== undefined,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        maxHeightPx = height - padding * 2,\n        currentHeightPx = 0,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE,\n        wrapAtWord = wrap !== CHAR && shouldWrap,\n        shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n\n    for (var i = 0, max = lines.length; i < max; ++i) {\n      var line = lines[i];\n\n      var lineWidth = this._getTextWidth(line);\n\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          var low = 0,\n              high = line.length,\n              match = '',\n              matchWidth = 0;\n\n          while (low < high) {\n            var mid = low + high >>> 1,\n                substr = line.slice(0, mid + 1),\n                substrWidth = this._getTextWidth(substr) + additionalWidth;\n\n            if (substrWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n\n          if (match) {\n            if (wrapAtWord) {\n              var wrapIndex;\n              var nextChar = line[match.length];\n              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = match.length;\n              } else {\n                wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n              }\n\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = match.slice(0, low);\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n\n            match = match.trimRight();\n\n            this._addTextLine(match);\n\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n\n            var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n\n            if (shouldHandleEllipsis) {\n              this._tryToAddEllipsisToLastLine();\n\n              break;\n            }\n\n            line = line.slice(low);\n            line = line.trimLeft();\n\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n\n        if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n          this._tryToAddEllipsisToLastLine();\n        }\n      }\n\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n\n      if (this.textArr[this.textArr.length - 1]) {\n        this.textArr[this.textArr.length - 1].lastInParagraph = true;\n      }\n    }\n\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  }\n\n  _shouldHandleEllipsis(currentHeightPx) {\n    var fontSize = +this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        height = this.attrs.height,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxHeightPx = height - padding * 2,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE;\n    return !shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n  }\n\n  _tryToAddEllipsisToLastLine() {\n    var width = this.attrs.width,\n        fixedWidth = width !== AUTO && width !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        shouldAddEllipsis = this.ellipsis();\n    var lastLine = this.textArr[this.textArr.length - 1];\n\n    if (!lastLine || !shouldAddEllipsis) {\n      return;\n    }\n\n    if (fixedWidth) {\n      var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n\n      if (!haveSpace) {\n        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n      }\n    }\n\n    this.textArr.splice(this.textArr.length - 1, 1);\n\n    this._addTextLine(lastLine.text + ELLIPSIS);\n  }\n\n  getStrokeScaleEnabled() {\n    return true;\n  }\n\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n\n_registerNode(Text);\n\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"names":["Util","Factory","Shape","getNumberValidator","getStringValidator","getNumberOrAutoValidator","getBooleanValidator","_registerNode","stringToArray","string","Array","from","AUTO","CENTER","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","length","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Text","constructor","n","on","_setTextData","_sceneFunc","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","lineTranslateX","lineTranslateY","setAttr","_getContextFont","getHeight","translate","obj","width","lastLine","lastInParagraph","spacesNumber","oneWord","lineWidth","save","beginPath","moveTo","Math","round","lineTo","strokeStyle","stroke","restore","array","li","letter","fillStrokeShape","measureSize","_hitFunc","height","rect","closePath","setText","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","getTextHeight","warn","textHeight","_context","metrics","font","measureText","fontStyle","fontVariant","_addTextLine","line","_getTextWidth","push","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","substr","slice","substrWidth","wrapIndex","nextChar","nextIsSpaceOrDash","lastIndexOf","trimRight","shouldHandleEllipsis","_shouldHandleEllipsis","_tryToAddEllipsisToLastLine","trimLeft","haveSpace","splice","getStrokeScaleEnabled","prototype","className","_attrsAffectingSize","overWriteSetter","addGetterSetter"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/node_modules/konva/lib/shapes/Text.js"],"sourcesContent":["import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator, } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n    return Array.from(string);\n}\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nexport class Text extends Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n                        if (shouldHandleEllipsis) {\n                            this._tryToAddEllipsisToLastLine();\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n                    this._tryToAddEllipsisToLastLine();\n                }\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    _shouldHandleEllipsis(currentHeightPx) {\n        var fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;\n        return (!shouldWrap ||\n            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));\n    }\n    _tryToAddEllipsisToLastLine() {\n        var width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();\n        var lastLine = this.textArr[this.textArr.length - 1];\n        if (!lastLine || !shouldAddEllipsis) {\n            return;\n        }\n        if (fixedWidth) {\n            var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n            if (!haveSpace) {\n                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n            }\n        }\n        this.textArr.splice(this.textArr.length - 1, 1);\n        this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}