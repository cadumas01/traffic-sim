{"ast":null,"code":"var _jsxFileName = \"C:\\\\traffic_sim\\\\traffic-sim\\\\sim_ui\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Stage, Layer, Rect, Text } from 'react-konva';\nimport road_data from './backend/salisbury-road-just-roads.json'; // Takes a JSON dict group (nodes) and pushes its elements into an Array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction dict_to_array(group) {\n  var array = [];\n\n  for (const element of Object.entries(group)) {\n    array.push(element);\n  }\n\n  console.log(array);\n  return {\n    array\n  };\n} // Takes an array of Node ids (way) and an array of nodes (nodes) and returns an array of\n// the x and y coordinates of the nodes in the way\n\n\nfunction way_points(nodes, way) {\n  var points = [];\n\n  for (const node of Object.entries(way)) {\n    console.log(node);\n  }\n\n  return points;\n}\n\nconst GEN_ROADS = dict_to_array(road_data.nodes.connections);\nconst GEN_ATTRS = dict_to_array(road_data.nodes.attractions);\nconst GEN_WAYS = dict_to_array(road_data.ways.roads);\n\nconst App = () => {\n  _s();\n\n  const roads = React.useState(GEN_ROADS);\n  const attrs = React.useState(GEN_ATTRS);\n  const ways = React.useState(GEN_WAYS);\n  console.log(ways[0].roads);\n\n  for (let i = 0; i < ways[0].roads.length; i++) {\n    var points = way_points(roads, ways[0].roads[i][1].node_refs); //console.log(ways[0].roads[i][1].jsonObj[\"node-refs\"])\n  }\n\n  const widthFactor = 1 / 2;\n  const heightFactor = 1 / 2;\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        text: \"Test Map\",\n        fontSize: 15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), roads[0].roads.map((_, i) => /*#__PURE__*/_jsxDEV(Rect, {\n        id: roads[0].roads[i][0],\n        x: roads[0].roads[i][1].lon * widthFactor,\n        y: roads[0].roads[i][1].lat * heightFactor,\n        width: 5,\n        height: 5,\n        fill: \"black\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)), attrs[0].roads.map((_, i) => /*#__PURE__*/_jsxDEV(Rect, {\n        id: attrs[0].roads[i][0],\n        x: attrs[0].roads[i][1].lon * widthFactor,\n        y: attrs[0].roads[i][1].lat * heightFactor,\n        width: 30,\n        height: 30,\n        fill: \"red\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"IJ8cgIb7yOXMrWGG9M/w/idkGFc=\");\n\n_c = App;\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 76,\n  columnNumber: 15\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","createRoot","Stage","Layer","Rect","Text","road_data","dict_to_array","group","array","element","Object","entries","push","console","log","way_points","nodes","way","points","node","GEN_ROADS","connections","GEN_ATTRS","attractions","GEN_WAYS","ways","roads","App","useState","attrs","i","length","node_refs","widthFactor","heightFactor","window","innerWidth","innerHeight","map","_","lon","lat","container","document","getElementById","root","render"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { Stage, Layer, Rect, Text } from 'react-konva';\r\nimport road_data from './backend/salisbury-road-just-roads.json';\r\n\r\n// Takes a JSON dict group (nodes) and pushes its elements into an Array\r\nfunction dict_to_array(group) {\r\n  var array = []\r\n  for (const element of Object.entries(group)) {\r\n    array.push(element)\r\n  }\r\n  console.log(array)\r\n  return {\r\n    array\r\n  }\r\n}\r\n\r\n// Takes an array of Node ids (way) and an array of nodes (nodes) and returns an array of\r\n// the x and y coordinates of the nodes in the way\r\nfunction way_points(nodes, way) {\r\n  var points = []\r\n  for (const node of Object.entries(way)) {\r\n    console.log(node)\r\n  }\r\n  return points;\r\n}\r\n\r\nconst GEN_ROADS = dict_to_array(road_data.nodes.connections)\r\nconst GEN_ATTRS = dict_to_array(road_data.nodes.attractions)\r\nconst GEN_WAYS = dict_to_array(road_data.ways.roads)\r\n\r\nconst App = () => {\r\n  const roads = React.useState(GEN_ROADS)\r\n  const attrs = React.useState(GEN_ATTRS)\r\n  const ways = React.useState(GEN_WAYS)\r\n  console.log(ways[0].roads)\r\n  for (let i = 0; i < ways[0].roads.length; i++) {\r\n    var points = way_points(roads, ways[0].roads[i][1].node_refs)\r\n    //console.log(ways[0].roads[i][1].jsonObj[\"node-refs\"])\r\n  }\r\n  const widthFactor = 1 / 2\r\n  const heightFactor = 1 / 2\r\n    return (\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          <Text text=\"Test Map\" fontSize={15} />\r\n          {roads[0].roads.map((_, i) => (\r\n          <Rect\r\n            key={i}\r\n            id={roads[0].roads[i][0]}\r\n            x={roads[0].roads[i][1].lon * widthFactor}\r\n            y={roads[0].roads[i][1].lat * heightFactor}\r\n            width={5}\r\n            height={5}\r\n            fill=\"black\"\r\n          />\r\n        ))}\r\n          {attrs[0].roads.map((_, i) => (\r\n          <Rect\r\n            key={i}\r\n            id={attrs[0].roads[i][0]}\r\n            x={attrs[0].roads[i][1].lon * widthFactor}\r\n            y={attrs[0].roads[i][1].lat * heightFactor}\r\n            width={30}\r\n            height={30}\r\n            fill=\"red\"\r\n          />\r\n        ))}\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  };\r\n  \r\n  const container = document.getElementById('root');\r\n  const root = createRoot(container);\r\n  root.render(<App />);\r\n  "],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,0CAAtB,C,CAEA;;;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAC5B,IAAIC,KAAK,GAAG,EAAZ;;EACA,KAAK,MAAMC,OAAX,IAAsBC,MAAM,CAACC,OAAP,CAAeJ,KAAf,CAAtB,EAA6C;IAC3CC,KAAK,CAACI,IAAN,CAAWH,OAAX;EACD;;EACDI,OAAO,CAACC,GAAR,CAAYN,KAAZ;EACA,OAAO;IACLA;EADK,CAAP;AAGD,C,CAED;AACA;;;AACA,SAASO,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;EAC9B,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,MAAMC,IAAX,IAAmBT,MAAM,CAACC,OAAP,CAAeM,GAAf,CAAnB,EAAwC;IACtCJ,OAAO,CAACC,GAAR,CAAYK,IAAZ;EACD;;EACD,OAAOD,MAAP;AACD;;AAED,MAAME,SAAS,GAAGd,aAAa,CAACD,SAAS,CAACW,KAAV,CAAgBK,WAAjB,CAA/B;AACA,MAAMC,SAAS,GAAGhB,aAAa,CAACD,SAAS,CAACW,KAAV,CAAgBO,WAAjB,CAA/B;AACA,MAAMC,QAAQ,GAAGlB,aAAa,CAACD,SAAS,CAACoB,IAAV,CAAeC,KAAhB,CAA9B;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAMD,KAAK,GAAG3B,KAAK,CAAC6B,QAAN,CAAeR,SAAf,CAAd;EACA,MAAMS,KAAK,GAAG9B,KAAK,CAAC6B,QAAN,CAAeN,SAAf,CAAd;EACA,MAAMG,IAAI,GAAG1B,KAAK,CAAC6B,QAAN,CAAeJ,QAAf,CAAb;EACAX,OAAO,CAACC,GAAR,CAAYW,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAApB;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,CAAcK,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;IAC7C,IAAIZ,MAAM,GAAGH,UAAU,CAACW,KAAD,EAAQD,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,CAAcI,CAAd,EAAiB,CAAjB,EAAoBE,SAA5B,CAAvB,CAD6C,CAE7C;EACD;;EACD,MAAMC,WAAW,GAAG,IAAI,CAAxB;EACA,MAAMC,YAAY,GAAG,IAAI,CAAzB;EACE,oBACE,QAAC,KAAD;IAAO,KAAK,EAAEC,MAAM,CAACC,UAArB;IAAiC,MAAM,EAAED,MAAM,CAACE,WAAhD;IAAA,uBACE,QAAC,KAAD;MAAA,wBACE,QAAC,IAAD;QAAM,IAAI,EAAC,UAAX;QAAsB,QAAQ,EAAE;MAAhC;QAAA;QAAA;QAAA;MAAA,QADF,EAEGX,KAAK,CAAC,CAAD,CAAL,CAASA,KAAT,CAAeY,GAAf,CAAmB,CAACC,CAAD,EAAIT,CAAJ,kBACpB,QAAC,IAAD;QAEE,EAAE,EAAEJ,KAAK,CAAC,CAAD,CAAL,CAASA,KAAT,CAAeI,CAAf,EAAkB,CAAlB,CAFN;QAGE,CAAC,EAAEJ,KAAK,CAAC,CAAD,CAAL,CAASA,KAAT,CAAeI,CAAf,EAAkB,CAAlB,EAAqBU,GAArB,GAA2BP,WAHhC;QAIE,CAAC,EAAEP,KAAK,CAAC,CAAD,CAAL,CAASA,KAAT,CAAeI,CAAf,EAAkB,CAAlB,EAAqBW,GAArB,GAA2BP,YAJhC;QAKE,KAAK,EAAE,CALT;QAME,MAAM,EAAE,CANV;QAOE,IAAI,EAAC;MAPP,GACOJ,CADP;QAAA;QAAA;QAAA;MAAA,QADC,CAFH,EAaGD,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAeY,GAAf,CAAmB,CAACC,CAAD,EAAIT,CAAJ,kBACpB,QAAC,IAAD;QAEE,EAAE,EAAED,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAeI,CAAf,EAAkB,CAAlB,CAFN;QAGE,CAAC,EAAED,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAeI,CAAf,EAAkB,CAAlB,EAAqBU,GAArB,GAA2BP,WAHhC;QAIE,CAAC,EAAEJ,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAeI,CAAf,EAAkB,CAAlB,EAAqBW,GAArB,GAA2BP,YAJhC;QAKE,KAAK,EAAE,EALT;QAME,MAAM,EAAE,EANV;QAOE,IAAI,EAAC;MAPP,GACOJ,CADP;QAAA;QAAA;QAAA;MAAA,QADC,CAbH;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CAxCH;;GAAMH,G;;KAAAA,G;AA0CJ,MAAMe,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAlB;AACA,MAAMC,IAAI,GAAG7C,UAAU,CAAC0C,SAAD,CAAvB;AACAG,IAAI,CAACC,MAAL,eAAY,QAAC,GAAD;EAAA;EAAA;EAAA;AAAA,QAAZ"},"metadata":{},"sourceType":"module"}