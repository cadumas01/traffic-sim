{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Animation } from '../Animation.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Sprite extends Shape {\n  constructor(config) {\n    super(config);\n    this._updated = true;\n    this.anim = new Animation(() => {\n      var updated = this._updated;\n      this._updated = false;\n      return updated;\n    });\n    this.on('animationChange.konva', function () {\n      this.frameIndex(0);\n    });\n    this.on('frameIndexChange.konva', function () {\n      this._updated = true;\n    });\n    this.on('frameRateChange.konva', function () {\n      if (!this.anim.isRunning()) {\n        return;\n      }\n\n      clearInterval(this.interval);\n\n      this._setInterval();\n    });\n  }\n\n  _sceneFunc(context) {\n    var anim = this.animation(),\n        index = this.frameIndex(),\n        ix4 = index * 4,\n        set = this.animations()[anim],\n        offsets = this.frameOffsets(),\n        x = set[ix4 + 0],\n        y = set[ix4 + 1],\n        width = set[ix4 + 2],\n        height = set[ix4 + 3],\n        image = this.image();\n\n    if (this.hasFill() || this.hasStroke()) {\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n\n    if (image) {\n      if (offsets) {\n        var offset = offsets[anim],\n            ix2 = index * 2;\n        context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n      } else {\n        context.drawImage(image, x, y, width, height, 0, 0, width, height);\n      }\n    }\n  }\n\n  _hitFunc(context) {\n    var anim = this.animation(),\n        index = this.frameIndex(),\n        ix4 = index * 4,\n        set = this.animations()[anim],\n        offsets = this.frameOffsets(),\n        width = set[ix4 + 2],\n        height = set[ix4 + 3];\n    context.beginPath();\n\n    if (offsets) {\n      var offset = offsets[anim];\n      var ix2 = index * 2;\n      context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n    } else {\n      context.rect(0, 0, width, height);\n    }\n\n    context.closePath();\n    context.fillShape(this);\n  }\n\n  _useBufferCanvas() {\n    return super._useBufferCanvas(true);\n  }\n\n  _setInterval() {\n    var that = this;\n    this.interval = setInterval(function () {\n      that._updateIndex();\n    }, 1000 / this.frameRate());\n  }\n\n  start() {\n    if (this.isRunning()) {\n      return;\n    }\n\n    var layer = this.getLayer();\n    this.anim.setLayers(layer);\n\n    this._setInterval();\n\n    this.anim.start();\n  }\n\n  stop() {\n    this.anim.stop();\n    clearInterval(this.interval);\n  }\n\n  isRunning() {\n    return this.anim.isRunning();\n  }\n\n  _updateIndex() {\n    var index = this.frameIndex(),\n        animation = this.animation(),\n        animations = this.animations(),\n        anim = animations[animation],\n        len = anim.length / 4;\n\n    if (index < len - 1) {\n      this.frameIndex(index + 1);\n    } else {\n      this.frameIndex(0);\n    }\n  }\n\n}\nSprite.prototype.className = 'Sprite';\n\n_registerNode(Sprite);\n\nFactory.addGetterSetter(Sprite, 'animation');\nFactory.addGetterSetter(Sprite, 'animations');\nFactory.addGetterSetter(Sprite, 'frameOffsets');\nFactory.addGetterSetter(Sprite, 'image');\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\nFactory.backCompat(Sprite, {\n  index: 'frameIndex',\n  getIndex: 'getFrameIndex',\n  setIndex: 'setFrameIndex'\n});","map":{"version":3,"names":["Factory","Shape","Animation","getNumberValidator","_registerNode","Sprite","constructor","config","_updated","anim","updated","on","frameIndex","isRunning","clearInterval","interval","_setInterval","_sceneFunc","context","animation","index","ix4","set","animations","offsets","frameOffsets","x","y","width","height","image","hasFill","hasStroke","beginPath","rect","closePath","fillStrokeShape","offset","ix2","drawImage","_hitFunc","fillShape","_useBufferCanvas","that","setInterval","_updateIndex","frameRate","start","layer","getLayer","setLayers","stop","len","length","prototype","className","addGetterSetter","backCompat","getIndex","setIndex"],"sources":["C:/traffic_sim/traffic-sim/sim_ui/node_modules/konva/lib/shapes/Sprite.js"],"sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Animation } from '../Animation.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Sprite extends Shape {\n    constructor(config) {\n        super(config);\n        this._updated = true;\n        this.anim = new Animation(() => {\n            var updated = this._updated;\n            this._updated = false;\n            return updated;\n        });\n        this.on('animationChange.konva', function () {\n            this.frameIndex(0);\n        });\n        this.on('frameIndexChange.konva', function () {\n            this._updated = true;\n        });\n        this.on('frameRateChange.konva', function () {\n            if (!this.anim.isRunning()) {\n                return;\n            }\n            clearInterval(this.interval);\n            this._setInterval();\n        });\n    }\n    _sceneFunc(context) {\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();\n        if (this.hasFill() || this.hasStroke()) {\n            context.beginPath();\n            context.rect(0, 0, width, height);\n            context.closePath();\n            context.fillStrokeShape(this);\n        }\n        if (image) {\n            if (offsets) {\n                var offset = offsets[anim], ix2 = index * 2;\n                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n            }\n            else {\n                context.drawImage(image, x, y, width, height, 0, 0, width, height);\n            }\n        }\n    }\n    _hitFunc(context) {\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];\n        context.beginPath();\n        if (offsets) {\n            var offset = offsets[anim];\n            var ix2 = index * 2;\n            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n        }\n        else {\n            context.rect(0, 0, width, height);\n        }\n        context.closePath();\n        context.fillShape(this);\n    }\n    _useBufferCanvas() {\n        return super._useBufferCanvas(true);\n    }\n    _setInterval() {\n        var that = this;\n        this.interval = setInterval(function () {\n            that._updateIndex();\n        }, 1000 / this.frameRate());\n    }\n    start() {\n        if (this.isRunning()) {\n            return;\n        }\n        var layer = this.getLayer();\n        this.anim.setLayers(layer);\n        this._setInterval();\n        this.anim.start();\n    }\n    stop() {\n        this.anim.stop();\n        clearInterval(this.interval);\n    }\n    isRunning() {\n        return this.anim.isRunning();\n    }\n    _updateIndex() {\n        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;\n        if (index < len - 1) {\n            this.frameIndex(index + 1);\n        }\n        else {\n            this.frameIndex(0);\n        }\n    }\n}\nSprite.prototype.className = 'Sprite';\n_registerNode(Sprite);\nFactory.addGetterSetter(Sprite, 'animation');\nFactory.addGetterSetter(Sprite, 'animations');\nFactory.addGetterSetter(Sprite, 'frameOffsets');\nFactory.addGetterSetter(Sprite, 'image');\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\nFactory.backCompat(Sprite, {\n    index: 'frameIndex',\n    getIndex: 'getFrameIndex',\n    setIndex: 'setFrameIndex',\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}